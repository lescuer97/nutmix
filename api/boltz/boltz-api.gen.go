// Package boltz provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package boltz

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// ChainPair defines model for ChainPair.
type ChainPair struct {
	Fees struct {
		MinerFees struct {
			// Claim Absolute miner fee that we estimate for the claim transaction in satoshis
			Claim float32 `json:"claim"`

			// Lockup Absolute miner fee that will be charged in satoshis
			Lockup float32 `json:"lockup"`
		} `json:"minerFees"`

		// Percentage Relative fee that will be charged in percent
		Percentage float32 `json:"percentage"`
	} `json:"fees"`

	// Hash Hash of the pair that can be used when creating the Chain Swap to ensure the information of the client is up-to-date
	Hash   string `json:"hash"`
	Limits struct {
		// Maximal Maximal amount that can be swapped in satoshis
		Maximal float32 `json:"maximal"`

		// Minimal Minimal amount that can be swapped in satoshis
		Minimal float32 `json:"minimal"`
	} `json:"limits"`

	// Rate Exchange rate of the pair
	Rate float32 `json:"rate"`
}

// ChainRequest defines model for ChainRequest.
type ChainRequest struct {
	// ClaimAddress EVM address with which the Chain Swap can be claimed
	ClaimAddress *string `json:"claimAddress,omitempty"`

	// ClaimPublicKey Public key with which the Chain Swap can be claimed encoded as HEX
	ClaimPublicKey *string `json:"claimPublicKey,omitempty"`

	// From The asset that is sent on lightning
	From string `json:"from"`

	// PairHash Pair hash from the pair information for the client to check if their fee data is up-to-date
	PairHash *string `json:"pairHash,omitempty"`

	// PreimageHash SHA-256 hash of the preimage of the Chain Swap encoded as HEX
	PreimageHash string `json:"preimageHash"`

	// ReferralId Referral ID to be used for the Chain Swap
	ReferralId *string `json:"referralId,omitempty"`

	// RefundPublicKey Public key with which the Chain Swap can be refunded encdoed as HEX
	RefundPublicKey *string `json:"refundPublicKey,omitempty"`

	// ServerLockAmount Amount the server should lock; conflicts with "userLockAmount"
	ServerLockAmount *float32 `json:"serverLockAmount,omitempty"`

	// To The asset that is received onchain
	To string `json:"to"`

	// UserLockAmount Amount the client is expected to lock; conflicts with "serverLockAmount"
	UserLockAmount *float32     `json:"userLockAmount,omitempty"`
	Webhook        *WebhookData `json:"webhook,omitempty"`
}

// ChainResponse defines model for ChainResponse.
type ChainResponse struct {
	ClaimDetails ChainSwapData `json:"claimDetails"`

	// Id ID of the created Reverse Swap
	Id            string        `json:"id"`
	LockupDetails ChainSwapData `json:"lockupDetails"`

	// ReferralId Referral ID used for the swap
	ReferralId *string `json:"referralId,omitempty"`
}

// ChainSwapData defines model for ChainSwapData.
type ChainSwapData struct {
	// Amount Amount that is supposed to be locked in the onchain HTLC
	Amount float32 `json:"amount"`

	// Bip21 BIP-21 for the UTXO onchain lockup of the user
	Bip21 *string `json:"bip21,omitempty"`

	// BlindingKey Liquid blinding private key encoded as HEX
	BlindingKey *string `json:"blindingKey,omitempty"`

	// LockupAddress HTLC address in which coins will be locked
	LockupAddress *string `json:"lockupAddress,omitempty"`

	// RefundAddress Address that should be specified as refund address for EVM lockup transactions
	RefundAddress *string `json:"refundAddress,omitempty"`

	// ServerPublicKey Public key of Boltz that is used in the aggregated public key
	ServerPublicKey *string  `json:"serverPublicKey,omitempty"`
	SwapTree        SwapTree `json:"swapTree"`

	// TimeoutBlockHeight Timeout block height of the onchain HTLC
	TimeoutBlockHeight float32 `json:"timeoutBlockHeight"`
}

// ChainSwapSigningDetails defines model for ChainSwapSigningDetails.
type ChainSwapSigningDetails struct {
	// PubNonce Public nonce of the client for the session, encoded as HEX
	PubNonce string `json:"pubNonce"`

	// PublicKey Public key of the server that was used in the aggregated public key
	PublicKey string `json:"publicKey"`

	// TransactionHash Transaction hash which should be signed, encoded as HEX
	TransactionHash string `json:"transactionHash"`
}

// ChainSwapSigningRequest defines model for ChainSwapSigningRequest.
type ChainSwapSigningRequest struct {
	// Preimage Preimage of the Chain Swap, encoded as HEX
	Preimage  *string           `json:"preimage,omitempty"`
	Signature *PartialSignature `json:"signature,omitempty"`
	ToSign    *struct {
		// Index Index of the input of the transaction that should be signed
		Index float32 `json:"index"`

		// PubNonce Public nonce of the client for the session encoded as HEX
		PubNonce string `json:"pubNonce"`

		// Transaction Transaction which should be signed encoded as HEX
		Transaction string `json:"transaction"`
	} `json:"toSign,omitempty"`
}

// ChainSwapTransaction defines model for ChainSwapTransaction.
type ChainSwapTransaction struct {
	Timeout *struct {
		// BlockHeight Timeout block height of the onchain HTLC
		BlockHeight float32 `json:"blockHeight"`

		// Eta Expected UNIX timestamp of the expiry of the onchain HTLC if not expired already
		Eta *float32 `json:"eta,omitempty"`
	} `json:"timeout,omitempty"`
	Transaction struct {
		// Hex The transaction encoded as HEX; set for UTXO based chains
		Hex *string `json:"hex,omitempty"`

		// Id ID of the transaction
		Id string `json:"id"`
	} `json:"transaction"`
}

// ChainSwapTransactions defines model for ChainSwapTransactions.
type ChainSwapTransactions struct {
	ServerLock *ChainSwapTransaction `json:"serverLock,omitempty"`
	UserLock   *ChainSwapTransaction `json:"userLock,omitempty"`
}

// Contracts defines model for Contracts.
type Contracts struct {
	// Network Information about the network
	Network struct {
		// ChainId ID of the chain
		ChainId float32 `json:"chainId"`

		// Name Name of the chain if applicable
		Name string `json:"name"`
	} `json:"network"`

	// SwapContracts Mapping of the names of swap contracts to their address
	SwapContracts struct {
		// ERC20Swap Address of the ERC20 contract
		ERC20Swap *string `json:"ERC20Swap,omitempty"`

		// EtherSwap Address of the EtherSwap contract
		EtherSwap *string `json:"EtherSwap,omitempty"`
	} `json:"swapContracts"`

	// Tokens Mapping of the symbol of tokens to their address
	Tokens map[string]string `json:"tokens"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error Description of the error that caused the request to fail
	Error string `json:"error"`
}

// NodeInfo defines model for NodeInfo.
type NodeInfo struct {
	PublicKey string   `json:"publicKey"`
	Uris      []string `json:"uris"`
}

// NodeStats defines model for NodeStats.
type NodeStats struct {
	Capacity int `json:"capacity"`
	Channels int `json:"channels"`

	// OldestChannel UNIX timestamp of the block in which the funding transaction of the oldest channel was included
	OldestChannel int `json:"oldestChannel"`
	Peers         int `json:"peers"`
}

// PartialSignature defines model for PartialSignature.
type PartialSignature struct {
	// PartialSignature Partial signature encoded as HEX
	PartialSignature string `json:"partialSignature"`

	// PubNonce Public nonce encoded as HEX
	PubNonce string `json:"pubNonce"`
}

// Quote defines model for Quote.
type Quote struct {
	// Amount New quote for a Swap. Amount that the server will lock for Chain Swaps
	Amount float32 `json:"amount"`
}

// QuoteResponse defines model for QuoteResponse.
type QuoteResponse = map[string]interface{}

// RefundRequest defines model for RefundRequest.
type RefundRequest struct {
	// Index Index of the input of the transaction that should be signed
	Index float32 `json:"index"`

	// PubNonce Public nonce of the client for the session encoded as HEX
	PubNonce string `json:"pubNonce"`

	// Transaction Transaction which should be signed encoded as HEX
	Transaction string `json:"transaction"`
}

// ReverseBip21 defines model for ReverseBip21.
type ReverseBip21 struct {
	// Bip21 BIP-21 for the Reverse Swap
	Bip21 *string `json:"bip21,omitempty"`

	// Signature Signature of the address in the BIP-21 of the public key in the routing hint
	Signature string `json:"signature"`
}

// ReverseClaimRequest defines model for ReverseClaimRequest.
type ReverseClaimRequest struct {
	// Index Index of the input of the transaction that should be signed
	Index float32 `json:"index"`

	// Preimage Preimage of the Reverse Swap encoded as HEX
	Preimage string `json:"preimage"`

	// PubNonce Public nonce of the client for the session encoded as HEX
	PubNonce string `json:"pubNonce"`

	// Transaction Transaction which should be signed encoded as HEX
	Transaction string `json:"transaction"`
}

// ReversePair defines model for ReversePair.
type ReversePair struct {
	Fees struct {
		MinerFees struct {
			// Claim Absolute miner fee that we estimate for the claim transaction in satoshis
			Claim float32 `json:"claim"`

			// Lockup Absolute miner fee that will be charged in satoshis
			Lockup float32 `json:"lockup"`
		} `json:"minerFees"`

		// Percentage Relative fee that will be charged in percent
		Percentage float32 `json:"percentage"`
	} `json:"fees"`

	// Hash Hash of the pair that can be used when creating the Reverse Swap to ensure the information of the client is up-to-date
	Hash   string `json:"hash"`
	Limits struct {
		// Maximal Maximal amount that can be swapped in satoshis
		Maximal float32 `json:"maximal"`

		// Minimal Minimal amount that can be swapped in satoshis
		Minimal float32 `json:"minimal"`
	} `json:"limits"`

	// Rate Exchange rate of the pair
	Rate float32 `json:"rate"`
}

// ReverseRequest defines model for ReverseRequest.
type ReverseRequest struct {
	// Address Address to be used for a BIP-21 direct payment
	Address *string `json:"address,omitempty"`

	// AddressSignature Signature of the claim public key of the SHA256 hash of the address for the direct payment
	AddressSignature *string `json:"addressSignature,omitempty"`

	// ClaimAddress EVM address with which the Reverse Swap can be claimed
	ClaimAddress *string `json:"claimAddress,omitempty"`

	// ClaimCovenant If the claim covenant should be added to the Taproot tree. Only possible when "address" is set
	ClaimCovenant *bool `json:"claimCovenant,omitempty"`

	// ClaimPublicKey Public key with which the Reverse Swap can be claimed encoded as HEX
	ClaimPublicKey *string `json:"claimPublicKey,omitempty"`

	// Description Description of the created invoice and magic routing hint. Only ASCII and a maximum length of 100 characters is allowed
	Description *string `json:"description,omitempty"`

	// DescriptionHash Description hash for the invoice. Takes precedence over "description" if both are specified
	DescriptionHash *string `json:"descriptionHash,omitempty"`

	// From The asset that is sent on lightning
	From string `json:"from"`

	// InvoiceAmount Amount for which the invoice should be; conflicts with "onchainAmount"
	InvoiceAmount *float32 `json:"invoiceAmount,omitempty"`

	// InvoiceExpiry Expiry of the invoice in seconds
	InvoiceExpiry *float32 `json:"invoiceExpiry,omitempty"`

	// OnchainAmount Amount that should be locked in the onchain HTLC; conflicts with "invoiceAmount"
	OnchainAmount *float32 `json:"onchainAmount,omitempty"`

	// PairHash Pair hash from the pair information for the client to check if their fee data is up-to-date
	PairHash *string `json:"pairHash,omitempty"`

	// PreimageHash SHA-256 hash of the preimage of the Reverse Swap encoded as HEX
	PreimageHash string `json:"preimageHash"`

	// ReferralId Referral ID to be used for the Reverse Swap
	ReferralId *string `json:"referralId,omitempty"`

	// To The asset that is received onchain
	To      string       `json:"to"`
	Webhook *WebhookData `json:"webhook,omitempty"`
}

// ReverseResponse defines model for ReverseResponse.
type ReverseResponse struct {
	// BlindingKey Liquid blinding private key encoded as HEX
	BlindingKey *string `json:"blindingKey,omitempty"`

	// Id ID of the created Reverse Swap
	Id string `json:"id"`

	// Invoice Hold invoice of the Reverse Swap
	Invoice string `json:"invoice"`

	// LockupAddress HTLC address in which coins will be locked
	LockupAddress *string `json:"lockupAddress,omitempty"`

	// OnchainAmount Amount that will be locked in the onchain HTLC
	OnchainAmount *float32 `json:"onchainAmount,omitempty"`

	// ReferralId Referral ID used for the swap
	ReferralId *string `json:"referralId,omitempty"`

	// RefundPublicKey Public key of Boltz that will be used to refund the onchain HTLC
	RefundPublicKey *string   `json:"refundPublicKey,omitempty"`
	SwapTree        *SwapTree `json:"swapTree,omitempty"`

	// TimeoutBlockHeight Timeout block height of the onchain HTLC
	TimeoutBlockHeight float32 `json:"timeoutBlockHeight"`
}

// ReverseTransaction defines model for ReverseTransaction.
type ReverseTransaction struct {
	// Hex Lockup transaction as raw HEX
	Hex *string `json:"hex,omitempty"`

	// Id ID the lockup transaction
	Id string `json:"id"`

	// TimeoutBlockHeight Block height at which the time-lock expires
	TimeoutBlockHeight float32 `json:"timeoutBlockHeight"`
}

// SubmarineClaimDetails defines model for SubmarineClaimDetails.
type SubmarineClaimDetails struct {
	// Preimage Preimage of the invoice for the Submarine Swap encoded as HEX
	Preimage string `json:"preimage"`

	// PubNonce Public nonce of Boltz encoded as HEX
	PubNonce string `json:"pubNonce"`

	// PublicKey Public key of Boltz encoded as HEX
	PublicKey string `json:"publicKey"`

	// TransactionHash Hash of the transaction that should be signed
	TransactionHash string `json:"transactionHash"`
}

// SubmarinePair defines model for SubmarinePair.
type SubmarinePair struct {
	Fees struct {
		// MinerFees Absolute miner fee that will be charged in satoshis
		MinerFees float32 `json:"minerFees"`

		// Percentage Relative fee that will be charged in percent
		Percentage float32 `json:"percentage"`
	} `json:"fees"`

	// Hash Hash of the pair that can be used when creating the Submarine Swap to ensure the information of the client is up-to-date
	Hash   string `json:"hash"`
	Limits struct {
		// Maximal Maximal amount that can be swapped in satoshis
		Maximal float32 `json:"maximal"`

		// MaximalZeroConf Maximal amount that will be accepted 0-conf in satoshis
		MaximalZeroConf float32 `json:"maximalZeroConf"`

		// Minimal Minimal amount that can be swapped in satoshis
		Minimal float32 `json:"minimal"`
	} `json:"limits"`

	// Rate Exchange rate of the pair
	Rate float32 `json:"rate"`
}

// SubmarinePreimage defines model for SubmarinePreimage.
type SubmarinePreimage struct {
	// Preimage Preimage of the Submarine Swap
	Preimage string `json:"preimage"`
}

// SubmarineRequest defines model for SubmarineRequest.
type SubmarineRequest struct {
	// From The asset that is sent onchain
	From string `json:"from"`

	// Invoice BOLT11 invoice that should be paid
	Invoice *string `json:"invoice,omitempty"`

	// PairHash Pair hash from the pair information for the client to check if their fee data is up-to-date
	PairHash *string `json:"pairHash,omitempty"`

	// PreimageHash Preimage hash of an invoice that will be set later
	PreimageHash *string `json:"preimageHash,omitempty"`

	// ReferralId Referral ID to be used for the Submarine swap
	ReferralId *string `json:"referralId,omitempty"`

	// RefundPublicKey Public key with which the Submarine Swap can be refunded encoded as HEX
	RefundPublicKey *string `json:"refundPublicKey,omitempty"`

	// To The asset that is received on lightning
	To      string       `json:"to"`
	Webhook *WebhookData `json:"webhook,omitempty"`
}

// SubmarineResponse defines model for SubmarineResponse.
type SubmarineResponse struct {
	// AcceptZeroConf Whether 0-conf will be accepted assuming the transaction does not signal RBF and has a reasonably high fee
	AcceptZeroConf *bool `json:"acceptZeroConf,omitempty"`

	// Address Onchain HTLC address
	Address *string `json:"address,omitempty"`

	// Bip21 BIP21 for the onchain payment request
	Bip21 *string `json:"bip21,omitempty"`

	// BlindingKey Liquid blinding private key encoded as HEX
	BlindingKey *string `json:"blindingKey,omitempty"`

	// ClaimPublicKey Public key of Boltz that will be used to sweep the onchain HTLC
	ClaimPublicKey *string `json:"claimPublicKey,omitempty"`

	// ExpectedAmount Amount that is expected to be sent to the onchain HTLC address in satoshis
	ExpectedAmount float32 `json:"expectedAmount"`

	// Id ID of the created Submarine Swap
	Id string `json:"id"`

	// ReferralId Referral ID used for the swap
	ReferralId *string   `json:"referralId,omitempty"`
	SwapTree   *SwapTree `json:"swapTree,omitempty"`

	// TimeoutBlockHeight Timeout block height of the onchain HTLC
	TimeoutBlockHeight float32 `json:"timeoutBlockHeight"`
}

// SubmarineTransaction defines model for SubmarineTransaction.
type SubmarineTransaction struct {
	// Hex Lockup transaction as raw HEX
	Hex *string `json:"hex,omitempty"`

	// Id ID the lockup transaction
	Id string `json:"id"`

	// TimeoutBlockHeight Block height at which the time-lock expires
	TimeoutBlockHeight float32 `json:"timeoutBlockHeight"`

	// TimeoutEta UNIX timestamp at which the time-lock expires; set if it has not expired already
	TimeoutEta *float32 `json:"timeoutEta,omitempty"`
}

// SwapStatus defines model for SwapStatus.
type SwapStatus struct {
	// Status Status of the Swap
	Status string `json:"status"`

	// Transaction Details of the transaction relevant to the status update
	Transaction *struct {
		// Hex Raw hex of the transaction
		Hex *string `json:"hex,omitempty"`

		// Id ID of the transaction
		Id *string `json:"id,omitempty"`
	} `json:"transaction,omitempty"`

	// ZeroConfRejected Whether 0-conf was accepted for the lockup transaction of the user
	ZeroConfRejected *bool `json:"zeroConfRejected,omitempty"`
}

// SwapTree defines model for SwapTree.
type SwapTree struct {
	ClaimLeaf  SwapTreeLeaf `json:"claimLeaf"`
	RefundLeaf SwapTreeLeaf `json:"refundLeaf"`
}

// SwapTreeLeaf defines model for SwapTreeLeaf.
type SwapTreeLeaf struct {
	// Output Script encoded as HEX
	Output string `json:"output"`

	// Version Tapscript version
	Version float32 `json:"version"`
}

// WebhookData defines model for WebhookData.
type WebhookData struct {
	// HashSwapId If the swap id in the Webhook calls should be hashed with SHA256; useful when Webhooks are processed by a third party
	HashSwapId *bool `json:"hashSwapId,omitempty"`

	// Status Swap status events for which the Webhook should be called. If undefined or empty, the Webhook will be called for all status events
	Status *[]string `json:"status,omitempty"`

	// Url URL that should be called. Only HTTPS is allowed
	Url string `json:"url"`
}

// PostChainCurrencyTransactionJSONBody defines parameters for PostChainCurrencyTransaction.
type PostChainCurrencyTransactionJSONBody struct {
	// Hex The transaction to broadcast as raw HEX
	Hex string `json:"hex"`
}

// PostLightningCurrencyBolt12FetchJSONBody defines parameters for PostLightningCurrencyBolt12Fetch.
type PostLightningCurrencyBolt12FetchJSONBody struct {
	// Amount Amount of the invoice that should be fetched in satoshis
	Amount float32 `json:"amount"`

	// Offer A BOLT12 offer
	Offer string `json:"offer"`
}

// GetReferralParams defines parameters for GetReferral.
type GetReferralParams struct {
	// TS Current UNIX timestamp when the request is sent
	TS string `json:"TS"`

	// APIKEY Your API key
	APIKEY string `json:"API-KEY"`

	// APIHMAC HMAC-SHA256 with your API-Secret as key of the TS + HTTP method (all uppercase) + the HTTP path
	APIHMAC string `json:"API-HMAC"`
}

// GetReferralFeesParams defines parameters for GetReferralFees.
type GetReferralFeesParams struct {
	// TS Current UNIX timestamp when the request is sent
	TS string `json:"TS"`

	// APIKEY Your API key
	APIKEY string `json:"API-KEY"`

	// APIHMAC HMAC-SHA256 with your API-Secret as key of the TS + HTTP method (all uppercase) + the HTTP path
	APIHMAC string `json:"API-HMAC"`
}

// GetReferralStatsParams defines parameters for GetReferralStats.
type GetReferralStatsParams struct {
	// TS Current UNIX timestamp when the request is sent
	TS string `json:"TS"`

	// APIKEY Your API key
	APIKEY string `json:"API-KEY"`

	// APIHMAC HMAC-SHA256 with your API-Secret as key of the TS + HTTP method (all uppercase) + the HTTP path
	APIHMAC string `json:"API-HMAC"`
}

// PostSwapSubmarineIdInvoiceJSONBody defines parameters for PostSwapSubmarineIdInvoice.
type PostSwapSubmarineIdInvoiceJSONBody struct {
	// Invoice BOLT11 invoice that should be paid. The preimage hash has to match the one specified when creating the swap
	Invoice  string  `json:"invoice"`
	PairHash *string `json:"pairHash,omitempty"`
}

// PostChainCurrencyTransactionJSONRequestBody defines body for PostChainCurrencyTransaction for application/json ContentType.
type PostChainCurrencyTransactionJSONRequestBody PostChainCurrencyTransactionJSONBody

// PostLightningCurrencyBolt12FetchJSONRequestBody defines body for PostLightningCurrencyBolt12Fetch for application/json ContentType.
type PostLightningCurrencyBolt12FetchJSONRequestBody PostLightningCurrencyBolt12FetchJSONBody

// PostSwapChainJSONRequestBody defines body for PostSwapChain for application/json ContentType.
type PostSwapChainJSONRequestBody = ChainRequest

// PostSwapChainIdClaimJSONRequestBody defines body for PostSwapChainIdClaim for application/json ContentType.
type PostSwapChainIdClaimJSONRequestBody = ChainSwapSigningRequest

// PostSwapChainIdQuoteJSONRequestBody defines body for PostSwapChainIdQuote for application/json ContentType.
type PostSwapChainIdQuoteJSONRequestBody = Quote

// PostSwapChainIdRefundJSONRequestBody defines body for PostSwapChainIdRefund for application/json ContentType.
type PostSwapChainIdRefundJSONRequestBody = RefundRequest

// PostSwapReverseJSONRequestBody defines body for PostSwapReverse for application/json ContentType.
type PostSwapReverseJSONRequestBody = ReverseRequest

// PostSwapReverseIdClaimJSONRequestBody defines body for PostSwapReverseIdClaim for application/json ContentType.
type PostSwapReverseIdClaimJSONRequestBody = ReverseClaimRequest

// PostSwapSubmarineJSONRequestBody defines body for PostSwapSubmarine for application/json ContentType.
type PostSwapSubmarineJSONRequestBody = SubmarineRequest

// PostSwapSubmarineIdClaimJSONRequestBody defines body for PostSwapSubmarineIdClaim for application/json ContentType.
type PostSwapSubmarineIdClaimJSONRequestBody = PartialSignature

// PostSwapSubmarineIdInvoiceJSONRequestBody defines body for PostSwapSubmarineIdInvoice for application/json ContentType.
type PostSwapSubmarineIdInvoiceJSONRequestBody PostSwapSubmarineIdInvoiceJSONBody

// PostSwapSubmarineIdRefundJSONRequestBody defines body for PostSwapSubmarineIdRefund for application/json ContentType.
type PostSwapSubmarineIdRefundJSONRequestBody = RefundRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetChainContracts request
	GetChainContracts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChainFees request
	GetChainFees(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChainHeights request
	GetChainHeights(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChainCurrencyContracts request
	GetChainCurrencyContracts(ctx context.Context, currency string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChainCurrencyFee request
	GetChainCurrencyFee(ctx context.Context, currency string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChainCurrencyHeight request
	GetChainCurrencyHeight(ctx context.Context, currency string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChainCurrencyTransactionWithBody request with any body
	PostChainCurrencyTransactionWithBody(ctx context.Context, currency string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChainCurrencyTransaction(ctx context.Context, currency string, body PostChainCurrencyTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChainCurrencyTransactionId request
	GetChainCurrencyTransactionId(ctx context.Context, currency string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInfos request
	GetInfos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLightningCurrencyBolt12FetchWithBody request with any body
	PostLightningCurrencyBolt12FetchWithBody(ctx context.Context, currency string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLightningCurrencyBolt12Fetch(ctx context.Context, currency string, body PostLightningCurrencyBolt12FetchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNodes request
	GetNodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNodesStats request
	GetNodesStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReferral request
	GetReferral(ctx context.Context, params *GetReferralParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReferralFees request
	GetReferralFees(ctx context.Context, params *GetReferralFeesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReferralStats request
	GetReferralStats(ctx context.Context, params *GetReferralStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwapChain request
	GetSwapChain(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSwapChainWithBody request with any body
	PostSwapChainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSwapChain(ctx context.Context, body PostSwapChainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwapChainIdClaim request
	GetSwapChainIdClaim(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSwapChainIdClaimWithBody request with any body
	PostSwapChainIdClaimWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSwapChainIdClaim(ctx context.Context, id string, body PostSwapChainIdClaimJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwapChainIdQuote request
	GetSwapChainIdQuote(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSwapChainIdQuoteWithBody request with any body
	PostSwapChainIdQuoteWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSwapChainIdQuote(ctx context.Context, id string, body PostSwapChainIdQuoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwapChainIdRefund request
	GetSwapChainIdRefund(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSwapChainIdRefundWithBody request with any body
	PostSwapChainIdRefundWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSwapChainIdRefund(ctx context.Context, id string, body PostSwapChainIdRefundJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwapChainIdTransactions request
	GetSwapChainIdTransactions(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwapReverse request
	GetSwapReverse(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSwapReverseWithBody request with any body
	PostSwapReverseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSwapReverse(ctx context.Context, body PostSwapReverseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSwapReverseIdClaimWithBody request with any body
	PostSwapReverseIdClaimWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSwapReverseIdClaim(ctx context.Context, id string, body PostSwapReverseIdClaimJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwapReverseIdTransaction request
	GetSwapReverseIdTransaction(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwapReverseInvoiceBip21 request
	GetSwapReverseInvoiceBip21(ctx context.Context, invoice string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwapSubmarine request
	GetSwapSubmarine(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSwapSubmarineWithBody request with any body
	PostSwapSubmarineWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSwapSubmarine(ctx context.Context, body PostSwapSubmarineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwapSubmarineIdClaim request
	GetSwapSubmarineIdClaim(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSwapSubmarineIdClaimWithBody request with any body
	PostSwapSubmarineIdClaimWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSwapSubmarineIdClaim(ctx context.Context, id string, body PostSwapSubmarineIdClaimJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSwapSubmarineIdInvoiceWithBody request with any body
	PostSwapSubmarineIdInvoiceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSwapSubmarineIdInvoice(ctx context.Context, id string, body PostSwapSubmarineIdInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwapSubmarineIdInvoiceAmount request
	GetSwapSubmarineIdInvoiceAmount(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwapSubmarineIdPreimage request
	GetSwapSubmarineIdPreimage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwapSubmarineIdRefund request
	GetSwapSubmarineIdRefund(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSwapSubmarineIdRefundWithBody request with any body
	PostSwapSubmarineIdRefundWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSwapSubmarineIdRefund(ctx context.Context, id string, body PostSwapSubmarineIdRefundJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwapSubmarineIdTransaction request
	GetSwapSubmarineIdTransaction(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwapId request
	GetSwapId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWarnings request
	GetWarnings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetChainContracts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChainContractsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChainFees(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChainFeesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChainHeights(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChainHeightsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChainCurrencyContracts(ctx context.Context, currency string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChainCurrencyContractsRequest(c.Server, currency)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChainCurrencyFee(ctx context.Context, currency string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChainCurrencyFeeRequest(c.Server, currency)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChainCurrencyHeight(ctx context.Context, currency string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChainCurrencyHeightRequest(c.Server, currency)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChainCurrencyTransactionWithBody(ctx context.Context, currency string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChainCurrencyTransactionRequestWithBody(c.Server, currency, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChainCurrencyTransaction(ctx context.Context, currency string, body PostChainCurrencyTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChainCurrencyTransactionRequest(c.Server, currency, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChainCurrencyTransactionId(ctx context.Context, currency string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChainCurrencyTransactionIdRequest(c.Server, currency, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInfos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInfosRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLightningCurrencyBolt12FetchWithBody(ctx context.Context, currency string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLightningCurrencyBolt12FetchRequestWithBody(c.Server, currency, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLightningCurrencyBolt12Fetch(ctx context.Context, currency string, body PostLightningCurrencyBolt12FetchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLightningCurrencyBolt12FetchRequest(c.Server, currency, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNodesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNodesStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNodesStatsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReferral(ctx context.Context, params *GetReferralParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReferralRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReferralFees(ctx context.Context, params *GetReferralFeesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReferralFeesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReferralStats(ctx context.Context, params *GetReferralStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReferralStatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwapChain(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwapChainRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSwapChainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSwapChainRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSwapChain(ctx context.Context, body PostSwapChainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSwapChainRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwapChainIdClaim(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwapChainIdClaimRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSwapChainIdClaimWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSwapChainIdClaimRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSwapChainIdClaim(ctx context.Context, id string, body PostSwapChainIdClaimJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSwapChainIdClaimRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwapChainIdQuote(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwapChainIdQuoteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSwapChainIdQuoteWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSwapChainIdQuoteRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSwapChainIdQuote(ctx context.Context, id string, body PostSwapChainIdQuoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSwapChainIdQuoteRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwapChainIdRefund(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwapChainIdRefundRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSwapChainIdRefundWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSwapChainIdRefundRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSwapChainIdRefund(ctx context.Context, id string, body PostSwapChainIdRefundJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSwapChainIdRefundRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwapChainIdTransactions(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwapChainIdTransactionsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwapReverse(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwapReverseRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSwapReverseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSwapReverseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSwapReverse(ctx context.Context, body PostSwapReverseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSwapReverseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSwapReverseIdClaimWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSwapReverseIdClaimRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSwapReverseIdClaim(ctx context.Context, id string, body PostSwapReverseIdClaimJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSwapReverseIdClaimRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwapReverseIdTransaction(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwapReverseIdTransactionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwapReverseInvoiceBip21(ctx context.Context, invoice string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwapReverseInvoiceBip21Request(c.Server, invoice)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwapSubmarine(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwapSubmarineRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSwapSubmarineWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSwapSubmarineRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSwapSubmarine(ctx context.Context, body PostSwapSubmarineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSwapSubmarineRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwapSubmarineIdClaim(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwapSubmarineIdClaimRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSwapSubmarineIdClaimWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSwapSubmarineIdClaimRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSwapSubmarineIdClaim(ctx context.Context, id string, body PostSwapSubmarineIdClaimJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSwapSubmarineIdClaimRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSwapSubmarineIdInvoiceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSwapSubmarineIdInvoiceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSwapSubmarineIdInvoice(ctx context.Context, id string, body PostSwapSubmarineIdInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSwapSubmarineIdInvoiceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwapSubmarineIdInvoiceAmount(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwapSubmarineIdInvoiceAmountRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwapSubmarineIdPreimage(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwapSubmarineIdPreimageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwapSubmarineIdRefund(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwapSubmarineIdRefundRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSwapSubmarineIdRefundWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSwapSubmarineIdRefundRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSwapSubmarineIdRefund(ctx context.Context, id string, body PostSwapSubmarineIdRefundJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSwapSubmarineIdRefundRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwapSubmarineIdTransaction(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwapSubmarineIdTransactionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwapId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwapIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWarnings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWarningsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetChainContractsRequest generates requests for GetChainContracts
func NewGetChainContractsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chain/contracts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChainFeesRequest generates requests for GetChainFees
func NewGetChainFeesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chain/fees")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChainHeightsRequest generates requests for GetChainHeights
func NewGetChainHeightsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chain/heights")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChainCurrencyContractsRequest generates requests for GetChainCurrencyContracts
func NewGetChainCurrencyContractsRequest(server string, currency string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "currency", runtime.ParamLocationPath, currency)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chain/%s/contracts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChainCurrencyFeeRequest generates requests for GetChainCurrencyFee
func NewGetChainCurrencyFeeRequest(server string, currency string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "currency", runtime.ParamLocationPath, currency)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chain/%s/fee", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChainCurrencyHeightRequest generates requests for GetChainCurrencyHeight
func NewGetChainCurrencyHeightRequest(server string, currency string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "currency", runtime.ParamLocationPath, currency)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chain/%s/height", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostChainCurrencyTransactionRequest calls the generic PostChainCurrencyTransaction builder with application/json body
func NewPostChainCurrencyTransactionRequest(server string, currency string, body PostChainCurrencyTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostChainCurrencyTransactionRequestWithBody(server, currency, "application/json", bodyReader)
}

// NewPostChainCurrencyTransactionRequestWithBody generates requests for PostChainCurrencyTransaction with any type of body
func NewPostChainCurrencyTransactionRequestWithBody(server string, currency string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "currency", runtime.ParamLocationPath, currency)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chain/%s/transaction", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetChainCurrencyTransactionIdRequest generates requests for GetChainCurrencyTransactionId
func NewGetChainCurrencyTransactionIdRequest(server string, currency string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "currency", runtime.ParamLocationPath, currency)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chain/%s/transaction/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInfosRequest generates requests for GetInfos
func NewGetInfosRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/infos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLightningCurrencyBolt12FetchRequest calls the generic PostLightningCurrencyBolt12Fetch builder with application/json body
func NewPostLightningCurrencyBolt12FetchRequest(server string, currency string, body PostLightningCurrencyBolt12FetchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLightningCurrencyBolt12FetchRequestWithBody(server, currency, "application/json", bodyReader)
}

// NewPostLightningCurrencyBolt12FetchRequestWithBody generates requests for PostLightningCurrencyBolt12Fetch with any type of body
func NewPostLightningCurrencyBolt12FetchRequestWithBody(server string, currency string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "currency", runtime.ParamLocationPath, currency)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lightning/%s/bolt12/fetch", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNodesRequest generates requests for GetNodes
func NewGetNodesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNodesStatsRequest generates requests for GetNodesStats
func NewGetNodesStatsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes/stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReferralRequest generates requests for GetReferral
func NewGetReferralRequest(server string, params *GetReferralParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/referral")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "TS", runtime.ParamLocationHeader, params.TS)
		if err != nil {
			return nil, err
		}

		req.Header.Set("TS", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "API-KEY", runtime.ParamLocationHeader, params.APIKEY)
		if err != nil {
			return nil, err
		}

		req.Header.Set("API-KEY", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "API-HMAC", runtime.ParamLocationHeader, params.APIHMAC)
		if err != nil {
			return nil, err
		}

		req.Header.Set("API-HMAC", headerParam2)

	}

	return req, nil
}

// NewGetReferralFeesRequest generates requests for GetReferralFees
func NewGetReferralFeesRequest(server string, params *GetReferralFeesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/referral/fees")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "TS", runtime.ParamLocationHeader, params.TS)
		if err != nil {
			return nil, err
		}

		req.Header.Set("TS", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "API-KEY", runtime.ParamLocationHeader, params.APIKEY)
		if err != nil {
			return nil, err
		}

		req.Header.Set("API-KEY", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "API-HMAC", runtime.ParamLocationHeader, params.APIHMAC)
		if err != nil {
			return nil, err
		}

		req.Header.Set("API-HMAC", headerParam2)

	}

	return req, nil
}

// NewGetReferralStatsRequest generates requests for GetReferralStats
func NewGetReferralStatsRequest(server string, params *GetReferralStatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/referral/stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "TS", runtime.ParamLocationHeader, params.TS)
		if err != nil {
			return nil, err
		}

		req.Header.Set("TS", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "API-KEY", runtime.ParamLocationHeader, params.APIKEY)
		if err != nil {
			return nil, err
		}

		req.Header.Set("API-KEY", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "API-HMAC", runtime.ParamLocationHeader, params.APIHMAC)
		if err != nil {
			return nil, err
		}

		req.Header.Set("API-HMAC", headerParam2)

	}

	return req, nil
}

// NewGetSwapChainRequest generates requests for GetSwapChain
func NewGetSwapChainRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/chain")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSwapChainRequest calls the generic PostSwapChain builder with application/json body
func NewPostSwapChainRequest(server string, body PostSwapChainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSwapChainRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSwapChainRequestWithBody generates requests for PostSwapChain with any type of body
func NewPostSwapChainRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/chain")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSwapChainIdClaimRequest generates requests for GetSwapChainIdClaim
func NewGetSwapChainIdClaimRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/chain/%s/claim", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSwapChainIdClaimRequest calls the generic PostSwapChainIdClaim builder with application/json body
func NewPostSwapChainIdClaimRequest(server string, id string, body PostSwapChainIdClaimJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSwapChainIdClaimRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostSwapChainIdClaimRequestWithBody generates requests for PostSwapChainIdClaim with any type of body
func NewPostSwapChainIdClaimRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/chain/%s/claim", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSwapChainIdQuoteRequest generates requests for GetSwapChainIdQuote
func NewGetSwapChainIdQuoteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/chain/%s/quote", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSwapChainIdQuoteRequest calls the generic PostSwapChainIdQuote builder with application/json body
func NewPostSwapChainIdQuoteRequest(server string, id string, body PostSwapChainIdQuoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSwapChainIdQuoteRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostSwapChainIdQuoteRequestWithBody generates requests for PostSwapChainIdQuote with any type of body
func NewPostSwapChainIdQuoteRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/chain/%s/quote", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSwapChainIdRefundRequest generates requests for GetSwapChainIdRefund
func NewGetSwapChainIdRefundRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/chain/%s/refund", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSwapChainIdRefundRequest calls the generic PostSwapChainIdRefund builder with application/json body
func NewPostSwapChainIdRefundRequest(server string, id string, body PostSwapChainIdRefundJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSwapChainIdRefundRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostSwapChainIdRefundRequestWithBody generates requests for PostSwapChainIdRefund with any type of body
func NewPostSwapChainIdRefundRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/chain/%s/refund", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSwapChainIdTransactionsRequest generates requests for GetSwapChainIdTransactions
func NewGetSwapChainIdTransactionsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/chain/%s/transactions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSwapReverseRequest generates requests for GetSwapReverse
func NewGetSwapReverseRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/reverse")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSwapReverseRequest calls the generic PostSwapReverse builder with application/json body
func NewPostSwapReverseRequest(server string, body PostSwapReverseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSwapReverseRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSwapReverseRequestWithBody generates requests for PostSwapReverse with any type of body
func NewPostSwapReverseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/reverse")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSwapReverseIdClaimRequest calls the generic PostSwapReverseIdClaim builder with application/json body
func NewPostSwapReverseIdClaimRequest(server string, id string, body PostSwapReverseIdClaimJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSwapReverseIdClaimRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostSwapReverseIdClaimRequestWithBody generates requests for PostSwapReverseIdClaim with any type of body
func NewPostSwapReverseIdClaimRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/reverse/%s/claim", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSwapReverseIdTransactionRequest generates requests for GetSwapReverseIdTransaction
func NewGetSwapReverseIdTransactionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/reverse/%s/transaction", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSwapReverseInvoiceBip21Request generates requests for GetSwapReverseInvoiceBip21
func NewGetSwapReverseInvoiceBip21Request(server string, invoice string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoice", runtime.ParamLocationPath, invoice)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/reverse/%s/bip21", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSwapSubmarineRequest generates requests for GetSwapSubmarine
func NewGetSwapSubmarineRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/submarine")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSwapSubmarineRequest calls the generic PostSwapSubmarine builder with application/json body
func NewPostSwapSubmarineRequest(server string, body PostSwapSubmarineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSwapSubmarineRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSwapSubmarineRequestWithBody generates requests for PostSwapSubmarine with any type of body
func NewPostSwapSubmarineRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/submarine")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSwapSubmarineIdClaimRequest generates requests for GetSwapSubmarineIdClaim
func NewGetSwapSubmarineIdClaimRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/submarine/%s/claim", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSwapSubmarineIdClaimRequest calls the generic PostSwapSubmarineIdClaim builder with application/json body
func NewPostSwapSubmarineIdClaimRequest(server string, id string, body PostSwapSubmarineIdClaimJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSwapSubmarineIdClaimRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostSwapSubmarineIdClaimRequestWithBody generates requests for PostSwapSubmarineIdClaim with any type of body
func NewPostSwapSubmarineIdClaimRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/submarine/%s/claim", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSwapSubmarineIdInvoiceRequest calls the generic PostSwapSubmarineIdInvoice builder with application/json body
func NewPostSwapSubmarineIdInvoiceRequest(server string, id string, body PostSwapSubmarineIdInvoiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSwapSubmarineIdInvoiceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostSwapSubmarineIdInvoiceRequestWithBody generates requests for PostSwapSubmarineIdInvoice with any type of body
func NewPostSwapSubmarineIdInvoiceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/submarine/%s/invoice", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSwapSubmarineIdInvoiceAmountRequest generates requests for GetSwapSubmarineIdInvoiceAmount
func NewGetSwapSubmarineIdInvoiceAmountRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/submarine/%s/invoice/amount", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSwapSubmarineIdPreimageRequest generates requests for GetSwapSubmarineIdPreimage
func NewGetSwapSubmarineIdPreimageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/submarine/%s/preimage", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSwapSubmarineIdRefundRequest generates requests for GetSwapSubmarineIdRefund
func NewGetSwapSubmarineIdRefundRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/submarine/%s/refund", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSwapSubmarineIdRefundRequest calls the generic PostSwapSubmarineIdRefund builder with application/json body
func NewPostSwapSubmarineIdRefundRequest(server string, id string, body PostSwapSubmarineIdRefundJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSwapSubmarineIdRefundRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostSwapSubmarineIdRefundRequestWithBody generates requests for PostSwapSubmarineIdRefund with any type of body
func NewPostSwapSubmarineIdRefundRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/submarine/%s/refund", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSwapSubmarineIdTransactionRequest generates requests for GetSwapSubmarineIdTransaction
func NewGetSwapSubmarineIdTransactionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/submarine/%s/transaction", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSwapIdRequest generates requests for GetSwapId
func NewGetSwapIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWarningsRequest generates requests for GetWarnings
func NewGetWarningsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/warnings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetChainContractsWithResponse request
	GetChainContractsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetChainContractsResponse, error)

	// GetChainFeesWithResponse request
	GetChainFeesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetChainFeesResponse, error)

	// GetChainHeightsWithResponse request
	GetChainHeightsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetChainHeightsResponse, error)

	// GetChainCurrencyContractsWithResponse request
	GetChainCurrencyContractsWithResponse(ctx context.Context, currency string, reqEditors ...RequestEditorFn) (*GetChainCurrencyContractsResponse, error)

	// GetChainCurrencyFeeWithResponse request
	GetChainCurrencyFeeWithResponse(ctx context.Context, currency string, reqEditors ...RequestEditorFn) (*GetChainCurrencyFeeResponse, error)

	// GetChainCurrencyHeightWithResponse request
	GetChainCurrencyHeightWithResponse(ctx context.Context, currency string, reqEditors ...RequestEditorFn) (*GetChainCurrencyHeightResponse, error)

	// PostChainCurrencyTransactionWithBodyWithResponse request with any body
	PostChainCurrencyTransactionWithBodyWithResponse(ctx context.Context, currency string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChainCurrencyTransactionResponse, error)

	PostChainCurrencyTransactionWithResponse(ctx context.Context, currency string, body PostChainCurrencyTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChainCurrencyTransactionResponse, error)

	// GetChainCurrencyTransactionIdWithResponse request
	GetChainCurrencyTransactionIdWithResponse(ctx context.Context, currency string, id string, reqEditors ...RequestEditorFn) (*GetChainCurrencyTransactionIdResponse, error)

	// GetInfosWithResponse request
	GetInfosWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInfosResponse, error)

	// PostLightningCurrencyBolt12FetchWithBodyWithResponse request with any body
	PostLightningCurrencyBolt12FetchWithBodyWithResponse(ctx context.Context, currency string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLightningCurrencyBolt12FetchResponse, error)

	PostLightningCurrencyBolt12FetchWithResponse(ctx context.Context, currency string, body PostLightningCurrencyBolt12FetchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLightningCurrencyBolt12FetchResponse, error)

	// GetNodesWithResponse request
	GetNodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNodesResponse, error)

	// GetNodesStatsWithResponse request
	GetNodesStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNodesStatsResponse, error)

	// GetReferralWithResponse request
	GetReferralWithResponse(ctx context.Context, params *GetReferralParams, reqEditors ...RequestEditorFn) (*GetReferralResponse, error)

	// GetReferralFeesWithResponse request
	GetReferralFeesWithResponse(ctx context.Context, params *GetReferralFeesParams, reqEditors ...RequestEditorFn) (*GetReferralFeesResponse, error)

	// GetReferralStatsWithResponse request
	GetReferralStatsWithResponse(ctx context.Context, params *GetReferralStatsParams, reqEditors ...RequestEditorFn) (*GetReferralStatsResponse, error)

	// GetSwapChainWithResponse request
	GetSwapChainWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSwapChainResponse, error)

	// PostSwapChainWithBodyWithResponse request with any body
	PostSwapChainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSwapChainResponse, error)

	PostSwapChainWithResponse(ctx context.Context, body PostSwapChainJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSwapChainResponse, error)

	// GetSwapChainIdClaimWithResponse request
	GetSwapChainIdClaimWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSwapChainIdClaimResponse, error)

	// PostSwapChainIdClaimWithBodyWithResponse request with any body
	PostSwapChainIdClaimWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSwapChainIdClaimResponse, error)

	PostSwapChainIdClaimWithResponse(ctx context.Context, id string, body PostSwapChainIdClaimJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSwapChainIdClaimResponse, error)

	// GetSwapChainIdQuoteWithResponse request
	GetSwapChainIdQuoteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSwapChainIdQuoteResponse, error)

	// PostSwapChainIdQuoteWithBodyWithResponse request with any body
	PostSwapChainIdQuoteWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSwapChainIdQuoteResponse, error)

	PostSwapChainIdQuoteWithResponse(ctx context.Context, id string, body PostSwapChainIdQuoteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSwapChainIdQuoteResponse, error)

	// GetSwapChainIdRefundWithResponse request
	GetSwapChainIdRefundWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSwapChainIdRefundResponse, error)

	// PostSwapChainIdRefundWithBodyWithResponse request with any body
	PostSwapChainIdRefundWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSwapChainIdRefundResponse, error)

	PostSwapChainIdRefundWithResponse(ctx context.Context, id string, body PostSwapChainIdRefundJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSwapChainIdRefundResponse, error)

	// GetSwapChainIdTransactionsWithResponse request
	GetSwapChainIdTransactionsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSwapChainIdTransactionsResponse, error)

	// GetSwapReverseWithResponse request
	GetSwapReverseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSwapReverseResponse, error)

	// PostSwapReverseWithBodyWithResponse request with any body
	PostSwapReverseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSwapReverseResponse, error)

	PostSwapReverseWithResponse(ctx context.Context, body PostSwapReverseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSwapReverseResponse, error)

	// PostSwapReverseIdClaimWithBodyWithResponse request with any body
	PostSwapReverseIdClaimWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSwapReverseIdClaimResponse, error)

	PostSwapReverseIdClaimWithResponse(ctx context.Context, id string, body PostSwapReverseIdClaimJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSwapReverseIdClaimResponse, error)

	// GetSwapReverseIdTransactionWithResponse request
	GetSwapReverseIdTransactionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSwapReverseIdTransactionResponse, error)

	// GetSwapReverseInvoiceBip21WithResponse request
	GetSwapReverseInvoiceBip21WithResponse(ctx context.Context, invoice string, reqEditors ...RequestEditorFn) (*GetSwapReverseInvoiceBip21Response, error)

	// GetSwapSubmarineWithResponse request
	GetSwapSubmarineWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSwapSubmarineResponse, error)

	// PostSwapSubmarineWithBodyWithResponse request with any body
	PostSwapSubmarineWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSwapSubmarineResponse, error)

	PostSwapSubmarineWithResponse(ctx context.Context, body PostSwapSubmarineJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSwapSubmarineResponse, error)

	// GetSwapSubmarineIdClaimWithResponse request
	GetSwapSubmarineIdClaimWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSwapSubmarineIdClaimResponse, error)

	// PostSwapSubmarineIdClaimWithBodyWithResponse request with any body
	PostSwapSubmarineIdClaimWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSwapSubmarineIdClaimResponse, error)

	PostSwapSubmarineIdClaimWithResponse(ctx context.Context, id string, body PostSwapSubmarineIdClaimJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSwapSubmarineIdClaimResponse, error)

	// PostSwapSubmarineIdInvoiceWithBodyWithResponse request with any body
	PostSwapSubmarineIdInvoiceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSwapSubmarineIdInvoiceResponse, error)

	PostSwapSubmarineIdInvoiceWithResponse(ctx context.Context, id string, body PostSwapSubmarineIdInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSwapSubmarineIdInvoiceResponse, error)

	// GetSwapSubmarineIdInvoiceAmountWithResponse request
	GetSwapSubmarineIdInvoiceAmountWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSwapSubmarineIdInvoiceAmountResponse, error)

	// GetSwapSubmarineIdPreimageWithResponse request
	GetSwapSubmarineIdPreimageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSwapSubmarineIdPreimageResponse, error)

	// GetSwapSubmarineIdRefundWithResponse request
	GetSwapSubmarineIdRefundWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSwapSubmarineIdRefundResponse, error)

	// PostSwapSubmarineIdRefundWithBodyWithResponse request with any body
	PostSwapSubmarineIdRefundWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSwapSubmarineIdRefundResponse, error)

	PostSwapSubmarineIdRefundWithResponse(ctx context.Context, id string, body PostSwapSubmarineIdRefundJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSwapSubmarineIdRefundResponse, error)

	// GetSwapSubmarineIdTransactionWithResponse request
	GetSwapSubmarineIdTransactionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSwapSubmarineIdTransactionResponse, error)

	// GetSwapIdWithResponse request
	GetSwapIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSwapIdResponse, error)

	// GetVersionWithResponse request
	GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error)

	// GetWarningsWithResponse request
	GetWarningsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWarningsResponse, error)
}

type GetChainContractsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]Contracts
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetChainContractsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChainContractsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChainFeesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]float32
}

// Status returns HTTPResponse.Status
func (r GetChainFeesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChainFeesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChainHeightsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]float32
}

// Status returns HTTPResponse.Status
func (r GetChainHeightsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChainHeightsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChainCurrencyContractsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Contracts
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetChainCurrencyContractsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChainCurrencyContractsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChainCurrencyFeeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Fee Fee estimation in sat/vbyte or GWEI
		Fee float32 `json:"fee"`
	}
	JSON400 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetChainCurrencyFeeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChainCurrencyFeeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChainCurrencyHeightResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Height Block height of the chain
		Height float32 `json:"height"`
	}
	JSON400 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetChainCurrencyHeightResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChainCurrencyHeightResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChainCurrencyTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// Id ID of the broadcast transaction
		Id string `json:"id"`
	}
	JSON400 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostChainCurrencyTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChainCurrencyTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChainCurrencyTransactionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Hex The transaction encoded as HEX
		Hex string `json:"hex"`
	}
	JSON400 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetChainCurrencyTransactionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChainCurrencyTransactionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInfosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetInfosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInfosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLightningCurrencyBolt12FetchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// Invoice A BOLT12 invoice
		Invoice string `json:"invoice"`
	}
	JSON400 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostLightningCurrencyBolt12FetchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLightningCurrencyBolt12FetchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]map[string]NodeInfo
}

// Status returns HTTPResponse.Status
func (r GetNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNodesStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]GetNodesStats_200_AdditionalProperties
}
type GetNodesStats_200_AdditionalProperties struct {
	Total                *NodeStats           `json:"total,omitempty"`
	AdditionalProperties map[string]NodeStats `json:"-"`
}

// Status returns HTTPResponse.Status
func (r GetNodesStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNodesStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReferralResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Id The referral ID for your API-KEY
		Id string `json:"id"`
	}
	JSON401 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetReferralResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReferralResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReferralFeesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]map[string]map[string]string
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetReferralFeesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReferralFeesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReferralStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]map[string]struct {
		// FailureRates Swap failure rates for each type
		FailureRates *struct {
			// ReverseSwaps Reverse Swap failure rate
			ReverseSwaps *float32 `json:"reverseSwaps,omitempty"`

			// Swaps Submarine Swap failure rate
			Swaps *float32 `json:"swaps,omitempty"`
		} `json:"failureRates,omitempty"`

		// Trades Swap counts
		Trades *GetReferralStats_200_Trades `json:"trades,omitempty"`

		// Volume Swap volume
		Volume *GetReferralStats_200_Volume `json:"volume,omitempty"`
	}
	JSON401 *ErrorResponse
}
type GetReferralStats_200_Trades struct {
	// Total Swap count across all pairs
	Total                *int           `json:"total,omitempty"`
	AdditionalProperties map[string]int `json:"-"`
}
type GetReferralStats_200_Volume struct {
	// Total Volume across all pairs in BTC
	Total                *string           `json:"total,omitempty"`
	AdditionalProperties map[string]string `json:"-"`
}

// Status returns HTTPResponse.Status
func (r GetReferralStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReferralStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwapChainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]map[string]ChainPair
}

// Status returns HTTPResponse.Status
func (r GetSwapChainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwapChainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSwapChainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ChainResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostSwapChainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSwapChainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwapChainIdClaimResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChainSwapSigningDetails
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSwapChainIdClaimResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwapChainIdClaimResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSwapChainIdClaimResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PartialSignature
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostSwapChainIdClaimResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSwapChainIdClaimResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwapChainIdQuoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Quote
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSwapChainIdQuoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwapChainIdQuoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSwapChainIdQuoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *QuoteResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostSwapChainIdQuoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSwapChainIdQuoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwapChainIdRefundResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Signature EIP-712 signature with which a cooperative refund can be executed onchain
		Signature string `json:"signature"`
	}
	JSON400 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSwapChainIdRefundResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwapChainIdRefundResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSwapChainIdRefundResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PartialSignature
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostSwapChainIdRefundResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSwapChainIdRefundResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwapChainIdTransactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChainSwapTransactions
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSwapChainIdTransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwapChainIdTransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwapReverseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]map[string]ReversePair
}

// Status returns HTTPResponse.Status
func (r GetSwapReverseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwapReverseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSwapReverseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ReverseResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostSwapReverseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSwapReverseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSwapReverseIdClaimResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PartialSignature
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostSwapReverseIdClaimResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSwapReverseIdClaimResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwapReverseIdTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReverseTransaction
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSwapReverseIdTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwapReverseIdTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwapReverseInvoiceBip21Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReverseBip21
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSwapReverseInvoiceBip21Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwapReverseInvoiceBip21Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwapSubmarineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]map[string]SubmarinePair
}

// Status returns HTTPResponse.Status
func (r GetSwapSubmarineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwapSubmarineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSwapSubmarineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SubmarineResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostSwapSubmarineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSwapSubmarineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwapSubmarineIdClaimResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubmarineClaimDetails
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSwapSubmarineIdClaimResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwapSubmarineIdClaimResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSwapSubmarineIdClaimResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostSwapSubmarineIdClaimResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSwapSubmarineIdClaimResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSwapSubmarineIdInvoiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// AcceptZeroConf Whether 0-conf will be accepted assuming the transaction does not signal RBF and has a reasonably high fee
		AcceptZeroConf bool `json:"acceptZeroConf"`

		// Bip21 BIP21 for the onchain payment request
		Bip21 string `json:"bip21"`

		// ExpectedAmount Amount that is expected to be sent to the onchain HTLC address in satoshis
		ExpectedAmount float32 `json:"expectedAmount"`
	}
	JSON400 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostSwapSubmarineIdInvoiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSwapSubmarineIdInvoiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwapSubmarineIdInvoiceAmountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// InvoiceAmount Expected amount of the invoice
		InvoiceAmount float32 `json:"invoiceAmount"`
	}
	JSON400 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSwapSubmarineIdInvoiceAmountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwapSubmarineIdInvoiceAmountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwapSubmarineIdPreimageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubmarinePreimage
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSwapSubmarineIdPreimageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwapSubmarineIdPreimageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwapSubmarineIdRefundResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Signature EIP-712 signature with which a cooperative refund can be executed onchain
		Signature string `json:"signature"`
	}
	JSON400 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSwapSubmarineIdRefundResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwapSubmarineIdRefundResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSwapSubmarineIdRefundResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PartialSignature
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostSwapSubmarineIdRefundResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSwapSubmarineIdRefundResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwapSubmarineIdTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubmarineTransaction
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSwapSubmarineIdTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwapSubmarineIdTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwapIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SwapStatus
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSwapIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwapIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Version string `json:"version"`
	}
}

// Status returns HTTPResponse.Status
func (r GetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWarningsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetWarningsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWarningsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetChainContractsWithResponse request returning *GetChainContractsResponse
func (c *ClientWithResponses) GetChainContractsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetChainContractsResponse, error) {
	rsp, err := c.GetChainContracts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChainContractsResponse(rsp)
}

// GetChainFeesWithResponse request returning *GetChainFeesResponse
func (c *ClientWithResponses) GetChainFeesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetChainFeesResponse, error) {
	rsp, err := c.GetChainFees(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChainFeesResponse(rsp)
}

// GetChainHeightsWithResponse request returning *GetChainHeightsResponse
func (c *ClientWithResponses) GetChainHeightsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetChainHeightsResponse, error) {
	rsp, err := c.GetChainHeights(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChainHeightsResponse(rsp)
}

// GetChainCurrencyContractsWithResponse request returning *GetChainCurrencyContractsResponse
func (c *ClientWithResponses) GetChainCurrencyContractsWithResponse(ctx context.Context, currency string, reqEditors ...RequestEditorFn) (*GetChainCurrencyContractsResponse, error) {
	rsp, err := c.GetChainCurrencyContracts(ctx, currency, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChainCurrencyContractsResponse(rsp)
}

// GetChainCurrencyFeeWithResponse request returning *GetChainCurrencyFeeResponse
func (c *ClientWithResponses) GetChainCurrencyFeeWithResponse(ctx context.Context, currency string, reqEditors ...RequestEditorFn) (*GetChainCurrencyFeeResponse, error) {
	rsp, err := c.GetChainCurrencyFee(ctx, currency, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChainCurrencyFeeResponse(rsp)
}

// GetChainCurrencyHeightWithResponse request returning *GetChainCurrencyHeightResponse
func (c *ClientWithResponses) GetChainCurrencyHeightWithResponse(ctx context.Context, currency string, reqEditors ...RequestEditorFn) (*GetChainCurrencyHeightResponse, error) {
	rsp, err := c.GetChainCurrencyHeight(ctx, currency, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChainCurrencyHeightResponse(rsp)
}

// PostChainCurrencyTransactionWithBodyWithResponse request with arbitrary body returning *PostChainCurrencyTransactionResponse
func (c *ClientWithResponses) PostChainCurrencyTransactionWithBodyWithResponse(ctx context.Context, currency string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChainCurrencyTransactionResponse, error) {
	rsp, err := c.PostChainCurrencyTransactionWithBody(ctx, currency, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChainCurrencyTransactionResponse(rsp)
}

func (c *ClientWithResponses) PostChainCurrencyTransactionWithResponse(ctx context.Context, currency string, body PostChainCurrencyTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChainCurrencyTransactionResponse, error) {
	rsp, err := c.PostChainCurrencyTransaction(ctx, currency, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChainCurrencyTransactionResponse(rsp)
}

// GetChainCurrencyTransactionIdWithResponse request returning *GetChainCurrencyTransactionIdResponse
func (c *ClientWithResponses) GetChainCurrencyTransactionIdWithResponse(ctx context.Context, currency string, id string, reqEditors ...RequestEditorFn) (*GetChainCurrencyTransactionIdResponse, error) {
	rsp, err := c.GetChainCurrencyTransactionId(ctx, currency, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChainCurrencyTransactionIdResponse(rsp)
}

// GetInfosWithResponse request returning *GetInfosResponse
func (c *ClientWithResponses) GetInfosWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInfosResponse, error) {
	rsp, err := c.GetInfos(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInfosResponse(rsp)
}

// PostLightningCurrencyBolt12FetchWithBodyWithResponse request with arbitrary body returning *PostLightningCurrencyBolt12FetchResponse
func (c *ClientWithResponses) PostLightningCurrencyBolt12FetchWithBodyWithResponse(ctx context.Context, currency string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLightningCurrencyBolt12FetchResponse, error) {
	rsp, err := c.PostLightningCurrencyBolt12FetchWithBody(ctx, currency, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLightningCurrencyBolt12FetchResponse(rsp)
}

func (c *ClientWithResponses) PostLightningCurrencyBolt12FetchWithResponse(ctx context.Context, currency string, body PostLightningCurrencyBolt12FetchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLightningCurrencyBolt12FetchResponse, error) {
	rsp, err := c.PostLightningCurrencyBolt12Fetch(ctx, currency, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLightningCurrencyBolt12FetchResponse(rsp)
}

// GetNodesWithResponse request returning *GetNodesResponse
func (c *ClientWithResponses) GetNodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNodesResponse, error) {
	rsp, err := c.GetNodes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNodesResponse(rsp)
}

// GetNodesStatsWithResponse request returning *GetNodesStatsResponse
func (c *ClientWithResponses) GetNodesStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNodesStatsResponse, error) {
	rsp, err := c.GetNodesStats(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNodesStatsResponse(rsp)
}

// GetReferralWithResponse request returning *GetReferralResponse
func (c *ClientWithResponses) GetReferralWithResponse(ctx context.Context, params *GetReferralParams, reqEditors ...RequestEditorFn) (*GetReferralResponse, error) {
	rsp, err := c.GetReferral(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReferralResponse(rsp)
}

// GetReferralFeesWithResponse request returning *GetReferralFeesResponse
func (c *ClientWithResponses) GetReferralFeesWithResponse(ctx context.Context, params *GetReferralFeesParams, reqEditors ...RequestEditorFn) (*GetReferralFeesResponse, error) {
	rsp, err := c.GetReferralFees(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReferralFeesResponse(rsp)
}

// GetReferralStatsWithResponse request returning *GetReferralStatsResponse
func (c *ClientWithResponses) GetReferralStatsWithResponse(ctx context.Context, params *GetReferralStatsParams, reqEditors ...RequestEditorFn) (*GetReferralStatsResponse, error) {
	rsp, err := c.GetReferralStats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReferralStatsResponse(rsp)
}

// GetSwapChainWithResponse request returning *GetSwapChainResponse
func (c *ClientWithResponses) GetSwapChainWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSwapChainResponse, error) {
	rsp, err := c.GetSwapChain(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwapChainResponse(rsp)
}

// PostSwapChainWithBodyWithResponse request with arbitrary body returning *PostSwapChainResponse
func (c *ClientWithResponses) PostSwapChainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSwapChainResponse, error) {
	rsp, err := c.PostSwapChainWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSwapChainResponse(rsp)
}

func (c *ClientWithResponses) PostSwapChainWithResponse(ctx context.Context, body PostSwapChainJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSwapChainResponse, error) {
	rsp, err := c.PostSwapChain(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSwapChainResponse(rsp)
}

// GetSwapChainIdClaimWithResponse request returning *GetSwapChainIdClaimResponse
func (c *ClientWithResponses) GetSwapChainIdClaimWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSwapChainIdClaimResponse, error) {
	rsp, err := c.GetSwapChainIdClaim(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwapChainIdClaimResponse(rsp)
}

// PostSwapChainIdClaimWithBodyWithResponse request with arbitrary body returning *PostSwapChainIdClaimResponse
func (c *ClientWithResponses) PostSwapChainIdClaimWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSwapChainIdClaimResponse, error) {
	rsp, err := c.PostSwapChainIdClaimWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSwapChainIdClaimResponse(rsp)
}

func (c *ClientWithResponses) PostSwapChainIdClaimWithResponse(ctx context.Context, id string, body PostSwapChainIdClaimJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSwapChainIdClaimResponse, error) {
	rsp, err := c.PostSwapChainIdClaim(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSwapChainIdClaimResponse(rsp)
}

// GetSwapChainIdQuoteWithResponse request returning *GetSwapChainIdQuoteResponse
func (c *ClientWithResponses) GetSwapChainIdQuoteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSwapChainIdQuoteResponse, error) {
	rsp, err := c.GetSwapChainIdQuote(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwapChainIdQuoteResponse(rsp)
}

// PostSwapChainIdQuoteWithBodyWithResponse request with arbitrary body returning *PostSwapChainIdQuoteResponse
func (c *ClientWithResponses) PostSwapChainIdQuoteWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSwapChainIdQuoteResponse, error) {
	rsp, err := c.PostSwapChainIdQuoteWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSwapChainIdQuoteResponse(rsp)
}

func (c *ClientWithResponses) PostSwapChainIdQuoteWithResponse(ctx context.Context, id string, body PostSwapChainIdQuoteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSwapChainIdQuoteResponse, error) {
	rsp, err := c.PostSwapChainIdQuote(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSwapChainIdQuoteResponse(rsp)
}

// GetSwapChainIdRefundWithResponse request returning *GetSwapChainIdRefundResponse
func (c *ClientWithResponses) GetSwapChainIdRefundWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSwapChainIdRefundResponse, error) {
	rsp, err := c.GetSwapChainIdRefund(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwapChainIdRefundResponse(rsp)
}

// PostSwapChainIdRefundWithBodyWithResponse request with arbitrary body returning *PostSwapChainIdRefundResponse
func (c *ClientWithResponses) PostSwapChainIdRefundWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSwapChainIdRefundResponse, error) {
	rsp, err := c.PostSwapChainIdRefundWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSwapChainIdRefundResponse(rsp)
}

func (c *ClientWithResponses) PostSwapChainIdRefundWithResponse(ctx context.Context, id string, body PostSwapChainIdRefundJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSwapChainIdRefundResponse, error) {
	rsp, err := c.PostSwapChainIdRefund(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSwapChainIdRefundResponse(rsp)
}

// GetSwapChainIdTransactionsWithResponse request returning *GetSwapChainIdTransactionsResponse
func (c *ClientWithResponses) GetSwapChainIdTransactionsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSwapChainIdTransactionsResponse, error) {
	rsp, err := c.GetSwapChainIdTransactions(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwapChainIdTransactionsResponse(rsp)
}

// GetSwapReverseWithResponse request returning *GetSwapReverseResponse
func (c *ClientWithResponses) GetSwapReverseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSwapReverseResponse, error) {
	rsp, err := c.GetSwapReverse(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwapReverseResponse(rsp)
}

// PostSwapReverseWithBodyWithResponse request with arbitrary body returning *PostSwapReverseResponse
func (c *ClientWithResponses) PostSwapReverseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSwapReverseResponse, error) {
	rsp, err := c.PostSwapReverseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSwapReverseResponse(rsp)
}

func (c *ClientWithResponses) PostSwapReverseWithResponse(ctx context.Context, body PostSwapReverseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSwapReverseResponse, error) {
	rsp, err := c.PostSwapReverse(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSwapReverseResponse(rsp)
}

// PostSwapReverseIdClaimWithBodyWithResponse request with arbitrary body returning *PostSwapReverseIdClaimResponse
func (c *ClientWithResponses) PostSwapReverseIdClaimWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSwapReverseIdClaimResponse, error) {
	rsp, err := c.PostSwapReverseIdClaimWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSwapReverseIdClaimResponse(rsp)
}

func (c *ClientWithResponses) PostSwapReverseIdClaimWithResponse(ctx context.Context, id string, body PostSwapReverseIdClaimJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSwapReverseIdClaimResponse, error) {
	rsp, err := c.PostSwapReverseIdClaim(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSwapReverseIdClaimResponse(rsp)
}

// GetSwapReverseIdTransactionWithResponse request returning *GetSwapReverseIdTransactionResponse
func (c *ClientWithResponses) GetSwapReverseIdTransactionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSwapReverseIdTransactionResponse, error) {
	rsp, err := c.GetSwapReverseIdTransaction(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwapReverseIdTransactionResponse(rsp)
}

// GetSwapReverseInvoiceBip21WithResponse request returning *GetSwapReverseInvoiceBip21Response
func (c *ClientWithResponses) GetSwapReverseInvoiceBip21WithResponse(ctx context.Context, invoice string, reqEditors ...RequestEditorFn) (*GetSwapReverseInvoiceBip21Response, error) {
	rsp, err := c.GetSwapReverseInvoiceBip21(ctx, invoice, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwapReverseInvoiceBip21Response(rsp)
}

// GetSwapSubmarineWithResponse request returning *GetSwapSubmarineResponse
func (c *ClientWithResponses) GetSwapSubmarineWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSwapSubmarineResponse, error) {
	rsp, err := c.GetSwapSubmarine(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwapSubmarineResponse(rsp)
}

// PostSwapSubmarineWithBodyWithResponse request with arbitrary body returning *PostSwapSubmarineResponse
func (c *ClientWithResponses) PostSwapSubmarineWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSwapSubmarineResponse, error) {
	rsp, err := c.PostSwapSubmarineWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSwapSubmarineResponse(rsp)
}

func (c *ClientWithResponses) PostSwapSubmarineWithResponse(ctx context.Context, body PostSwapSubmarineJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSwapSubmarineResponse, error) {
	rsp, err := c.PostSwapSubmarine(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSwapSubmarineResponse(rsp)
}

// GetSwapSubmarineIdClaimWithResponse request returning *GetSwapSubmarineIdClaimResponse
func (c *ClientWithResponses) GetSwapSubmarineIdClaimWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSwapSubmarineIdClaimResponse, error) {
	rsp, err := c.GetSwapSubmarineIdClaim(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwapSubmarineIdClaimResponse(rsp)
}

// PostSwapSubmarineIdClaimWithBodyWithResponse request with arbitrary body returning *PostSwapSubmarineIdClaimResponse
func (c *ClientWithResponses) PostSwapSubmarineIdClaimWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSwapSubmarineIdClaimResponse, error) {
	rsp, err := c.PostSwapSubmarineIdClaimWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSwapSubmarineIdClaimResponse(rsp)
}

func (c *ClientWithResponses) PostSwapSubmarineIdClaimWithResponse(ctx context.Context, id string, body PostSwapSubmarineIdClaimJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSwapSubmarineIdClaimResponse, error) {
	rsp, err := c.PostSwapSubmarineIdClaim(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSwapSubmarineIdClaimResponse(rsp)
}

// PostSwapSubmarineIdInvoiceWithBodyWithResponse request with arbitrary body returning *PostSwapSubmarineIdInvoiceResponse
func (c *ClientWithResponses) PostSwapSubmarineIdInvoiceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSwapSubmarineIdInvoiceResponse, error) {
	rsp, err := c.PostSwapSubmarineIdInvoiceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSwapSubmarineIdInvoiceResponse(rsp)
}

func (c *ClientWithResponses) PostSwapSubmarineIdInvoiceWithResponse(ctx context.Context, id string, body PostSwapSubmarineIdInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSwapSubmarineIdInvoiceResponse, error) {
	rsp, err := c.PostSwapSubmarineIdInvoice(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSwapSubmarineIdInvoiceResponse(rsp)
}

// GetSwapSubmarineIdInvoiceAmountWithResponse request returning *GetSwapSubmarineIdInvoiceAmountResponse
func (c *ClientWithResponses) GetSwapSubmarineIdInvoiceAmountWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSwapSubmarineIdInvoiceAmountResponse, error) {
	rsp, err := c.GetSwapSubmarineIdInvoiceAmount(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwapSubmarineIdInvoiceAmountResponse(rsp)
}

// GetSwapSubmarineIdPreimageWithResponse request returning *GetSwapSubmarineIdPreimageResponse
func (c *ClientWithResponses) GetSwapSubmarineIdPreimageWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSwapSubmarineIdPreimageResponse, error) {
	rsp, err := c.GetSwapSubmarineIdPreimage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwapSubmarineIdPreimageResponse(rsp)
}

// GetSwapSubmarineIdRefundWithResponse request returning *GetSwapSubmarineIdRefundResponse
func (c *ClientWithResponses) GetSwapSubmarineIdRefundWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSwapSubmarineIdRefundResponse, error) {
	rsp, err := c.GetSwapSubmarineIdRefund(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwapSubmarineIdRefundResponse(rsp)
}

// PostSwapSubmarineIdRefundWithBodyWithResponse request with arbitrary body returning *PostSwapSubmarineIdRefundResponse
func (c *ClientWithResponses) PostSwapSubmarineIdRefundWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSwapSubmarineIdRefundResponse, error) {
	rsp, err := c.PostSwapSubmarineIdRefundWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSwapSubmarineIdRefundResponse(rsp)
}

func (c *ClientWithResponses) PostSwapSubmarineIdRefundWithResponse(ctx context.Context, id string, body PostSwapSubmarineIdRefundJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSwapSubmarineIdRefundResponse, error) {
	rsp, err := c.PostSwapSubmarineIdRefund(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSwapSubmarineIdRefundResponse(rsp)
}

// GetSwapSubmarineIdTransactionWithResponse request returning *GetSwapSubmarineIdTransactionResponse
func (c *ClientWithResponses) GetSwapSubmarineIdTransactionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSwapSubmarineIdTransactionResponse, error) {
	rsp, err := c.GetSwapSubmarineIdTransaction(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwapSubmarineIdTransactionResponse(rsp)
}

// GetSwapIdWithResponse request returning *GetSwapIdResponse
func (c *ClientWithResponses) GetSwapIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSwapIdResponse, error) {
	rsp, err := c.GetSwapId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwapIdResponse(rsp)
}

// GetVersionWithResponse request returning *GetVersionResponse
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error) {
	rsp, err := c.GetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionResponse(rsp)
}

// GetWarningsWithResponse request returning *GetWarningsResponse
func (c *ClientWithResponses) GetWarningsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWarningsResponse, error) {
	rsp, err := c.GetWarnings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWarningsResponse(rsp)
}

// ParseGetChainContractsResponse parses an HTTP response from a GetChainContractsWithResponse call
func ParseGetChainContractsResponse(rsp *http.Response) (*GetChainContractsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChainContractsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]Contracts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetChainFeesResponse parses an HTTP response from a GetChainFeesWithResponse call
func ParseGetChainFeesResponse(rsp *http.Response) (*GetChainFeesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChainFeesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]float32
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChainHeightsResponse parses an HTTP response from a GetChainHeightsWithResponse call
func ParseGetChainHeightsResponse(rsp *http.Response) (*GetChainHeightsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChainHeightsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]float32
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChainCurrencyContractsResponse parses an HTTP response from a GetChainCurrencyContractsWithResponse call
func ParseGetChainCurrencyContractsResponse(rsp *http.Response) (*GetChainCurrencyContractsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChainCurrencyContractsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Contracts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetChainCurrencyFeeResponse parses an HTTP response from a GetChainCurrencyFeeWithResponse call
func ParseGetChainCurrencyFeeResponse(rsp *http.Response) (*GetChainCurrencyFeeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChainCurrencyFeeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Fee Fee estimation in sat/vbyte or GWEI
			Fee float32 `json:"fee"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetChainCurrencyHeightResponse parses an HTTP response from a GetChainCurrencyHeightWithResponse call
func ParseGetChainCurrencyHeightResponse(rsp *http.Response) (*GetChainCurrencyHeightResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChainCurrencyHeightResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Height Block height of the chain
			Height float32 `json:"height"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostChainCurrencyTransactionResponse parses an HTTP response from a PostChainCurrencyTransactionWithResponse call
func ParsePostChainCurrencyTransactionResponse(rsp *http.Response) (*PostChainCurrencyTransactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChainCurrencyTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// Id ID of the broadcast transaction
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetChainCurrencyTransactionIdResponse parses an HTTP response from a GetChainCurrencyTransactionIdWithResponse call
func ParseGetChainCurrencyTransactionIdResponse(rsp *http.Response) (*GetChainCurrencyTransactionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChainCurrencyTransactionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Hex The transaction encoded as HEX
			Hex string `json:"hex"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetInfosResponse parses an HTTP response from a GetInfosWithResponse call
func ParseGetInfosResponse(rsp *http.Response) (*GetInfosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInfosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostLightningCurrencyBolt12FetchResponse parses an HTTP response from a PostLightningCurrencyBolt12FetchWithResponse call
func ParsePostLightningCurrencyBolt12FetchResponse(rsp *http.Response) (*PostLightningCurrencyBolt12FetchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLightningCurrencyBolt12FetchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// Invoice A BOLT12 invoice
			Invoice string `json:"invoice"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetNodesResponse parses an HTTP response from a GetNodesWithResponse call
func ParseGetNodesResponse(rsp *http.Response) (*GetNodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]map[string]NodeInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetNodesStatsResponse parses an HTTP response from a GetNodesStatsWithResponse call
func ParseGetNodesStatsResponse(rsp *http.Response) (*GetNodesStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNodesStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]GetNodesStats_200_AdditionalProperties
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReferralResponse parses an HTTP response from a GetReferralWithResponse call
func ParseGetReferralResponse(rsp *http.Response) (*GetReferralResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReferralResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Id The referral ID for your API-KEY
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetReferralFeesResponse parses an HTTP response from a GetReferralFeesWithResponse call
func ParseGetReferralFeesResponse(rsp *http.Response) (*GetReferralFeesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReferralFeesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]map[string]map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetReferralStatsResponse parses an HTTP response from a GetReferralStatsWithResponse call
func ParseGetReferralStatsResponse(rsp *http.Response) (*GetReferralStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReferralStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]map[string]struct {
			// FailureRates Swap failure rates for each type
			FailureRates *struct {
				// ReverseSwaps Reverse Swap failure rate
				ReverseSwaps *float32 `json:"reverseSwaps,omitempty"`

				// Swaps Submarine Swap failure rate
				Swaps *float32 `json:"swaps,omitempty"`
			} `json:"failureRates,omitempty"`

			// Trades Swap counts
			Trades *GetReferralStats_200_Trades `json:"trades,omitempty"`

			// Volume Swap volume
			Volume *GetReferralStats_200_Volume `json:"volume,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetSwapChainResponse parses an HTTP response from a GetSwapChainWithResponse call
func ParseGetSwapChainResponse(rsp *http.Response) (*GetSwapChainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwapChainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]map[string]ChainPair
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSwapChainResponse parses an HTTP response from a PostSwapChainWithResponse call
func ParsePostSwapChainResponse(rsp *http.Response) (*PostSwapChainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSwapChainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ChainResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSwapChainIdClaimResponse parses an HTTP response from a GetSwapChainIdClaimWithResponse call
func ParseGetSwapChainIdClaimResponse(rsp *http.Response) (*GetSwapChainIdClaimResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwapChainIdClaimResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChainSwapSigningDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostSwapChainIdClaimResponse parses an HTTP response from a PostSwapChainIdClaimWithResponse call
func ParsePostSwapChainIdClaimResponse(rsp *http.Response) (*PostSwapChainIdClaimResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSwapChainIdClaimResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PartialSignature
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSwapChainIdQuoteResponse parses an HTTP response from a GetSwapChainIdQuoteWithResponse call
func ParseGetSwapChainIdQuoteResponse(rsp *http.Response) (*GetSwapChainIdQuoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwapChainIdQuoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Quote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostSwapChainIdQuoteResponse parses an HTTP response from a PostSwapChainIdQuoteWithResponse call
func ParsePostSwapChainIdQuoteResponse(rsp *http.Response) (*PostSwapChainIdQuoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSwapChainIdQuoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest QuoteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSwapChainIdRefundResponse parses an HTTP response from a GetSwapChainIdRefundWithResponse call
func ParseGetSwapChainIdRefundResponse(rsp *http.Response) (*GetSwapChainIdRefundResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwapChainIdRefundResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Signature EIP-712 signature with which a cooperative refund can be executed onchain
			Signature string `json:"signature"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostSwapChainIdRefundResponse parses an HTTP response from a PostSwapChainIdRefundWithResponse call
func ParsePostSwapChainIdRefundResponse(rsp *http.Response) (*PostSwapChainIdRefundResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSwapChainIdRefundResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PartialSignature
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSwapChainIdTransactionsResponse parses an HTTP response from a GetSwapChainIdTransactionsWithResponse call
func ParseGetSwapChainIdTransactionsResponse(rsp *http.Response) (*GetSwapChainIdTransactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwapChainIdTransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChainSwapTransactions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSwapReverseResponse parses an HTTP response from a GetSwapReverseWithResponse call
func ParseGetSwapReverseResponse(rsp *http.Response) (*GetSwapReverseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwapReverseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]map[string]ReversePair
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSwapReverseResponse parses an HTTP response from a PostSwapReverseWithResponse call
func ParsePostSwapReverseResponse(rsp *http.Response) (*PostSwapReverseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSwapReverseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ReverseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostSwapReverseIdClaimResponse parses an HTTP response from a PostSwapReverseIdClaimWithResponse call
func ParsePostSwapReverseIdClaimResponse(rsp *http.Response) (*PostSwapReverseIdClaimResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSwapReverseIdClaimResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PartialSignature
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSwapReverseIdTransactionResponse parses an HTTP response from a GetSwapReverseIdTransactionWithResponse call
func ParseGetSwapReverseIdTransactionResponse(rsp *http.Response) (*GetSwapReverseIdTransactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwapReverseIdTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReverseTransaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSwapReverseInvoiceBip21Response parses an HTTP response from a GetSwapReverseInvoiceBip21WithResponse call
func ParseGetSwapReverseInvoiceBip21Response(rsp *http.Response) (*GetSwapReverseInvoiceBip21Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwapReverseInvoiceBip21Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReverseBip21
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSwapSubmarineResponse parses an HTTP response from a GetSwapSubmarineWithResponse call
func ParseGetSwapSubmarineResponse(rsp *http.Response) (*GetSwapSubmarineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwapSubmarineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]map[string]SubmarinePair
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSwapSubmarineResponse parses an HTTP response from a PostSwapSubmarineWithResponse call
func ParsePostSwapSubmarineResponse(rsp *http.Response) (*PostSwapSubmarineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSwapSubmarineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SubmarineResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSwapSubmarineIdClaimResponse parses an HTTP response from a GetSwapSubmarineIdClaimWithResponse call
func ParseGetSwapSubmarineIdClaimResponse(rsp *http.Response) (*GetSwapSubmarineIdClaimResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwapSubmarineIdClaimResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubmarineClaimDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostSwapSubmarineIdClaimResponse parses an HTTP response from a PostSwapSubmarineIdClaimWithResponse call
func ParsePostSwapSubmarineIdClaimResponse(rsp *http.Response) (*PostSwapSubmarineIdClaimResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSwapSubmarineIdClaimResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostSwapSubmarineIdInvoiceResponse parses an HTTP response from a PostSwapSubmarineIdInvoiceWithResponse call
func ParsePostSwapSubmarineIdInvoiceResponse(rsp *http.Response) (*PostSwapSubmarineIdInvoiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSwapSubmarineIdInvoiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// AcceptZeroConf Whether 0-conf will be accepted assuming the transaction does not signal RBF and has a reasonably high fee
			AcceptZeroConf bool `json:"acceptZeroConf"`

			// Bip21 BIP21 for the onchain payment request
			Bip21 string `json:"bip21"`

			// ExpectedAmount Amount that is expected to be sent to the onchain HTLC address in satoshis
			ExpectedAmount float32 `json:"expectedAmount"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSwapSubmarineIdInvoiceAmountResponse parses an HTTP response from a GetSwapSubmarineIdInvoiceAmountWithResponse call
func ParseGetSwapSubmarineIdInvoiceAmountResponse(rsp *http.Response) (*GetSwapSubmarineIdInvoiceAmountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwapSubmarineIdInvoiceAmountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// InvoiceAmount Expected amount of the invoice
			InvoiceAmount float32 `json:"invoiceAmount"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSwapSubmarineIdPreimageResponse parses an HTTP response from a GetSwapSubmarineIdPreimageWithResponse call
func ParseGetSwapSubmarineIdPreimageResponse(rsp *http.Response) (*GetSwapSubmarineIdPreimageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwapSubmarineIdPreimageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubmarinePreimage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSwapSubmarineIdRefundResponse parses an HTTP response from a GetSwapSubmarineIdRefundWithResponse call
func ParseGetSwapSubmarineIdRefundResponse(rsp *http.Response) (*GetSwapSubmarineIdRefundResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwapSubmarineIdRefundResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Signature EIP-712 signature with which a cooperative refund can be executed onchain
			Signature string `json:"signature"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostSwapSubmarineIdRefundResponse parses an HTTP response from a PostSwapSubmarineIdRefundWithResponse call
func ParsePostSwapSubmarineIdRefundResponse(rsp *http.Response) (*PostSwapSubmarineIdRefundResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSwapSubmarineIdRefundResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PartialSignature
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSwapSubmarineIdTransactionResponse parses an HTTP response from a GetSwapSubmarineIdTransactionWithResponse call
func ParseGetSwapSubmarineIdTransactionResponse(rsp *http.Response) (*GetSwapSubmarineIdTransactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwapSubmarineIdTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubmarineTransaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSwapIdResponse parses an HTTP response from a GetSwapIdWithResponse call
func ParseGetSwapIdResponse(rsp *http.Response) (*GetSwapIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwapIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SwapStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetVersionResponse parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionResponse(rsp *http.Response) (*GetVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Version string `json:"version"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWarningsResponse parses an HTTP response from a GetWarningsWithResponse call
func ParseGetWarningsResponse(rsp *http.Response) (*GetWarningsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWarningsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
